// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalPersonReference.DB;

namespace NaturalPersonReference.DB.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201116220430_initialize")]
    partial class initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Kutaisi"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Batumi"
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GEO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENG"
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.LocaleResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocaleResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            ResourceName = "FirstName.Error",
                            ResourceValue = "არავალლიდური სახელი"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            ResourceName = "FirstName.Error",
                            ResourceValue = "First Name is not valid"
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1995, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            FirstName = "Nika",
                            Gender = 1,
                            LastName = "Kurdadze",
                            PhoneId = 1,
                            Tin = "57001057458"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1994, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            FirstName = "Vazha",
                            Gender = 1,
                            LastName = "Jambazishvili",
                            PhoneId = 2,
                            Tin = "57001057451"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1994, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            FirstName = "Beka",
                            Gender = 0,
                            LastName = "Latsabidze",
                            PhoneId = 3,
                            Tin = "57001057458"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1994, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 3,
                            FirstName = "Giga",
                            Gender = 1,
                            LastName = "Grigalashvili",
                            PhoneId = 1,
                            Tin = "57001057428"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1994, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            FirstName = "Zura",
                            Gender = 1,
                            LastName = "Adghuladze",
                            PhoneId = 4,
                            Tin = "77701052458"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1994, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 3,
                            FirstName = "Goderdzi",
                            Gender = 1,
                            LastName = "Lominashvili",
                            PhoneId = 5,
                            Tin = "57001057451"
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "551551551",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            PhoneNumber = "551551552",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            PhoneNumber = "551551553",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            PhoneNumber = "551551554",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            PhoneNumber = "551551555",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            PhoneNumber = "551551544",
                            Type = 2
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.RelatedPersons", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "RelatedPersonId");

                    b.HasIndex("RelatedPersonId");

                    b.ToTable("RelatedPersons");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            RelatedPersonId = 2,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 4,
                            RelatedPersonId = 5,
                            ConnectionType = 0
                        },
                        new
                        {
                            PersonId = 3,
                            RelatedPersonId = 6,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 5,
                            RelatedPersonId = 2,
                            ConnectionType = 2
                        },
                        new
                        {
                            PersonId = 1,
                            RelatedPersonId = 3,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 1,
                            RelatedPersonId = 4,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 1,
                            RelatedPersonId = 5,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 1,
                            RelatedPersonId = 6,
                            ConnectionType = 3
                        },
                        new
                        {
                            PersonId = 2,
                            RelatedPersonId = 4,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 3,
                            RelatedPersonId = 2,
                            ConnectionType = 1
                        },
                        new
                        {
                            PersonId = 3,
                            RelatedPersonId = 4,
                            ConnectionType = 2
                        },
                        new
                        {
                            PersonId = 3,
                            RelatedPersonId = 5,
                            ConnectionType = 1
                        });
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.Person", b =>
                {
                    b.HasOne("NaturalPersonReference.BL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaturalPersonReference.BL.Entities.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.RelatedPersons", b =>
                {
                    b.HasOne("NaturalPersonReference.BL.Entities.Person", "Person")
                        .WithMany("RelatedPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NaturalPersonReference.BL.Entities.Person", "RelatedPerson")
                        .WithMany("RelatedPersonsFrom")
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("NaturalPersonReference.BL.Entities.Person", b =>
                {
                    b.Navigation("RelatedPersons");

                    b.Navigation("RelatedPersonsFrom");
                });
#pragma warning restore 612, 618
        }
    }
}
